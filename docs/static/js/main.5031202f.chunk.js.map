{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","divGifExpert","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,sBAAMC,SAXU,SAACC,GAEjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACH,mCAEVC,EAHa,0DAG4CC,UAAUH,GAHtD,oBACH,oCADG,SAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CACHF,GAAIA,EACJC,MAAOA,EACPT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAVnB,kBAaZM,GAbY,4CAAH,sDCEPM,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAChC,OACI,sBAAKa,UAAU,oCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,kCAAKA,EAAL,WCFCO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECEb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAXAC,qBAAU,WAENvB,EAAQC,GAAUuB,MAAK,SAACC,GAAD,OACnBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAIlB,CAACnB,IAEGoB,EDjB0BK,CAAazB,GAAjCY,EAHwB,EAG7BL,KAAaY,EAHgB,EAGhBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDf,EAApD,OACEmB,GAAW,mBAAGJ,UAAU,mCAAb,0BACb,qBAAKA,UAAU,YAAf,SACI,6BAEQH,EAAOH,KAAI,SAACiB,GAAD,OACP,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,eEenCiB,EA5BM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAQvB,OACI,qCACI,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAaA,GADLA,YCf9B6B,G,MAAeC,SAASC,cAAc,eAE5CC,IAASC,OACP,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.5031202f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    // el target tiene el valor del input\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const hadleSubmit = (e) => {\n        // para que no recargue la pagina\n        e.preventDefault();\n        // Validando si el campo es vacio\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={hadleSubmit} >\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\n// Validando que el setCategories es requerido\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const api_key = 'OkpfeRLseOMtrhFGqsxzHs6TbASjdLUU';\n    // Se agrego https\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=${api_key}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(({ id, title, images }) => {\n        return {\n            id: id,\n            title: title,\n            url: images?.downsized_medium.url\n        }\n    });\n    return gifs;\n};\n\nexport default getGifs;","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n    // desectructuracion\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n            { loading && <p className=\"animate__animated animate__flash\"> Loading ...</p> }\n            <div className=\"card-grid\">\n                <ol>\n                    {\n                        images.map((img) => (\n                            <GifGridItem key={img.id} {...img} />\n                        ))\n                    }\n                </ol>\n            </div>\n        </>\n    );\n};\n","// los hooks son funciones\n// los custom hooks funcionan como si fueran funcional components\nimport { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\nimport React from 'react'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    // se utiliza para que realice peticiones cuando cambia la categoria\n    useEffect(() => {\n\n        getGifs(category).then((imgs) =>\n            setState({\n                data: imgs,\n                loading: false\n            })\n        );\n        // .then(setImages);\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'HunterxHunter']);\n    //     setCategories(cats => [...cats, 'HunterxHunter']);\n    // }\n\n    return (\n        <>\n            <h2> Git Expert App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            {/* <button onClick = { handleAdd }>Agregar</button> */}\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            key = { category }\n                            category = { category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n// GifExpertApp\n\nconst divGifExpert = document.querySelector('#gifExpert');\n\nReactDOM.render(\n  <GifExpertApp />, divGifExpert\n);"],"sourceRoot":""}